// Generated by go-wayland-scanner
// https://github.com/rajveermalviya/go-wayland/cmd/go-wayland-scanner
// XML file : https://raw.githubusercontent.com/wayland-project/wayland-protocols/1.25/unstable/xdg-shell/xdg-shell-unstable-v6.xml
//
// xdg_shell_unstable_v6 Protocol Copyright:
//
// Copyright © 2008-2013 Kristian Høgsberg
// Copyright © 2013      Rafael Antognolli
// Copyright © 2013      Jasper St. Pierre
// Copyright © 2010-2013 Intel Corporation
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice (including the next
// paragraph) shall be included in all copies or substantial portions of the
// Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

package xdg_shell

import "github.com/rajveermalviya/go-wayland/wayland/client"

// Shell : create desktop-style surfaces
//
// xdg_shell allows clients to turn a wl_surface into a "real window"
// which can be dragged, resized, stacked, and moved around by the
// user. Everything about this interface is suited towards traditional
// desktop environments.
type Shell struct {
	client.BaseProxy
	pingHandlers []ShellPingHandlerFunc
}

// NewShell : create desktop-style surfaces
//
// xdg_shell allows clients to turn a wl_surface into a "real window"
// which can be dragged, resized, stacked, and moved around by the
// user. Everything about this interface is suited towards traditional
// desktop environments.
func NewShell(ctx *client.Context) *Shell {
	zxdgShellV6 := &Shell{}
	ctx.Register(zxdgShellV6)
	return zxdgShellV6
}

// Destroy : destroy xdg_shell
//
// Destroy this xdg_shell object.
//
// Destroying a bound xdg_shell object while there are surfaces
// still alive created by this xdg_shell object instance is illegal
// and will result in a protocol error.
//
func (i *Shell) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 0
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// CreatePositioner : create a positioner object
//
// Create a positioner object. A positioner object is used to position
// surfaces relative to some parent surface. See the interface description
// and xdg_surface.get_popup for details.
//
func (i *Shell) CreatePositioner() (*Positioner, error) {
	id := NewPositioner(i.Context())
	const opcode = 1
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], id.ID())
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return id, err
}

// GetXdgSurface : create a shell surface from a surface
//
// This creates an xdg_surface for the given surface. While xdg_surface
// itself is not a role, the corresponding surface may only be assigned
// a role extending xdg_surface, such as xdg_toplevel or xdg_popup.
//
// This creates an xdg_surface for the given surface. An xdg_surface is
// used as basis to define a role to a given surface, such as xdg_toplevel
// or xdg_popup. It also manages functionality shared between xdg_surface
// based surface roles.
//
// See the documentation of xdg_surface for more details about what an
// xdg_surface is and how it is used.
//
func (i *Shell) GetXdgSurface(surface *client.Surface) (*Surface, error) {
	id := NewSurface(i.Context())
	const opcode = 2
	const rLen = 8 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], id.ID())
	l += 4
	client.PutUint32(r[l:l+4], surface.ID())
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return id, err
}

// Pong : respond to a ping event
//
// A client must respond to a ping event with a pong request or
// the client may be deemed unresponsive. See xdg_shell.ping.
//
//  serial: serial of the ping event
func (i *Shell) Pong(serial uint32) error {
	const opcode = 3
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(serial))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

type ShellError uint32

// ShellError :
const (
	// ShellErrorRole : given wl_surface has another role
	ShellErrorRole ShellError = 0
	// ShellErrorDefunctSurfaces : xdg_shell was destroyed before children
	ShellErrorDefunctSurfaces ShellError = 1
	// ShellErrorNotTheTopmostPopup : the client tried to map or destroy a non-topmost popup
	ShellErrorNotTheTopmostPopup ShellError = 2
	// ShellErrorInvalidPopupParent : the client specified an invalid popup parent surface
	ShellErrorInvalidPopupParent ShellError = 3
	// ShellErrorInvalidSurfaceState : the client provided an invalid surface state
	ShellErrorInvalidSurfaceState ShellError = 4
	// ShellErrorInvalidPositioner : the client provided an invalid positioner
	ShellErrorInvalidPositioner ShellError = 5
)

func (e ShellError) Name() string {
	switch e {
	case ShellErrorRole:
		return "role"
	case ShellErrorDefunctSurfaces:
		return "defunct_surfaces"
	case ShellErrorNotTheTopmostPopup:
		return "not_the_topmost_popup"
	case ShellErrorInvalidPopupParent:
		return "invalid_popup_parent"
	case ShellErrorInvalidSurfaceState:
		return "invalid_surface_state"
	case ShellErrorInvalidPositioner:
		return "invalid_positioner"
	default:
		return ""
	}
}

func (e ShellError) Value() string {
	switch e {
	case ShellErrorRole:
		return "0"
	case ShellErrorDefunctSurfaces:
		return "1"
	case ShellErrorNotTheTopmostPopup:
		return "2"
	case ShellErrorInvalidPopupParent:
		return "3"
	case ShellErrorInvalidSurfaceState:
		return "4"
	case ShellErrorInvalidPositioner:
		return "5"
	default:
		return ""
	}
}

func (e ShellError) String() string {
	return e.Name() + "=" + e.Value()
}

// ShellPingEvent : check if the client is alive
//
// The ping event asks the client if it's still alive. Pass the
// serial specified in the event back to the compositor by sending
// a "pong" request back with the specified serial. See xdg_shell.ping.
//
// Compositors can use this to determine if the client is still
// alive. It's unspecified what will happen if the client doesn't
// respond to the ping request, or in what timeframe. Clients should
// try to respond in a reasonable amount of time.
//
// A compositor is free to ping in any way it wants, but a client must
// always respond to any xdg_shell object it created.
type ShellPingEvent struct {
	Serial uint32
}
type ShellPingHandlerFunc func(ShellPingEvent)

// AddPingHandler : adds handler for ShellPingEvent
func (i *Shell) AddPingHandler(f ShellPingHandlerFunc) {
	if f == nil {
		return
	}

	i.pingHandlers = append(i.pingHandlers, f)
}

func (i *Shell) Dispatch(opcode uint16, fd uintptr, data []byte) {
	switch opcode {
	case 0:
		if len(i.pingHandlers) == 0 {
			return
		}
		var e ShellPingEvent
		l := 0
		e.Serial = client.Uint32(data[l : l+4])
		l += 4
		for _, f := range i.pingHandlers {
			f(e)
		}
	}
}

// Positioner : child surface positioner
//
// The xdg_positioner provides a collection of rules for the placement of a
// child surface relative to a parent surface. Rules can be defined to ensure
// the child surface remains within the visible area's borders, and to
// specify how the child surface changes its position, such as sliding along
// an axis, or flipping around a rectangle. These positioner-created rules are
// constrained by the requirement that a child surface must intersect with or
// be at least partially adjacent to its parent surface.
//
// See the various requests for details about possible rules.
//
// At the time of the request, the compositor makes a copy of the rules
// specified by the xdg_positioner. Thus, after the request is complete the
// xdg_positioner object can be destroyed or reused; further changes to the
// object will have no effect on previous usages.
//
// For an xdg_positioner object to be considered complete, it must have a
// non-zero size set by set_size, and a non-zero anchor rectangle set by
// set_anchor_rect. Passing an incomplete xdg_positioner object when
// positioning a surface raises an error.
type Positioner struct {
	client.BaseProxy
}

// NewPositioner : child surface positioner
//
// The xdg_positioner provides a collection of rules for the placement of a
// child surface relative to a parent surface. Rules can be defined to ensure
// the child surface remains within the visible area's borders, and to
// specify how the child surface changes its position, such as sliding along
// an axis, or flipping around a rectangle. These positioner-created rules are
// constrained by the requirement that a child surface must intersect with or
// be at least partially adjacent to its parent surface.
//
// See the various requests for details about possible rules.
//
// At the time of the request, the compositor makes a copy of the rules
// specified by the xdg_positioner. Thus, after the request is complete the
// xdg_positioner object can be destroyed or reused; further changes to the
// object will have no effect on previous usages.
//
// For an xdg_positioner object to be considered complete, it must have a
// non-zero size set by set_size, and a non-zero anchor rectangle set by
// set_anchor_rect. Passing an incomplete xdg_positioner object when
// positioning a surface raises an error.
func NewPositioner(ctx *client.Context) *Positioner {
	zxdgPositionerV6 := &Positioner{}
	ctx.Register(zxdgPositionerV6)
	return zxdgPositionerV6
}

// Destroy : destroy the xdg_positioner object
//
// Notify the compositor that the xdg_positioner will no longer be used.
//
func (i *Positioner) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 0
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetSize : set the size of the to-be positioned rectangle
//
// Set the size of the surface that is to be positioned with the positioner
// object. The size is in surface-local coordinates and corresponds to the
// window geometry. See xdg_surface.set_window_geometry.
//
// If a zero or negative size is set the invalid_input error is raised.
//
//  width: width of positioned rectangle
//  height: height of positioned rectangle
func (i *Positioner) SetSize(width, height int32) error {
	const opcode = 1
	const rLen = 8 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(width))
	l += 4
	client.PutUint32(r[l:l+4], uint32(height))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetAnchorRect : set the anchor rectangle within the parent surface
//
// Specify the anchor rectangle within the parent surface that the child
// surface will be placed relative to. The rectangle is relative to the
// window geometry as defined by xdg_surface.set_window_geometry of the
// parent surface. The rectangle must be at least 1x1 large.
//
// When the xdg_positioner object is used to position a child surface, the
// anchor rectangle may not extend outside the window geometry of the
// positioned child's parent surface.
//
// If a zero or negative size is set the invalid_input error is raised.
//
//  x: x position of anchor rectangle
//  y: y position of anchor rectangle
//  width: width of anchor rectangle
//  height: height of anchor rectangle
func (i *Positioner) SetAnchorRect(x, y, width, height int32) error {
	const opcode = 2
	const rLen = 8 + 4 + 4 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(x))
	l += 4
	client.PutUint32(r[l:l+4], uint32(y))
	l += 4
	client.PutUint32(r[l:l+4], uint32(width))
	l += 4
	client.PutUint32(r[l:l+4], uint32(height))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetAnchor : set anchor rectangle anchor edges
//
// Defines a set of edges for the anchor rectangle. These are used to
// derive an anchor point that the child surface will be positioned
// relative to. If two orthogonal edges are specified (e.g. 'top' and
// 'left'), then the anchor point will be the intersection of the edges
// (e.g. the top left position of the rectangle); otherwise, the derived
// anchor point will be centered on the specified edge, or in the center of
// the anchor rectangle if no edge is specified.
//
// If two parallel anchor edges are specified (e.g. 'left' and 'right'),
// the invalid_input error is raised.
//
//  anchor: bit mask of anchor edges
func (i *Positioner) SetAnchor(anchor uint32) error {
	const opcode = 3
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(anchor))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetGravity : set child surface gravity
//
// Defines in what direction a surface should be positioned, relative to
// the anchor point of the parent surface. If two orthogonal gravities are
// specified (e.g. 'bottom' and 'right'), then the child surface will be
// placed in the specified direction; otherwise, the child surface will be
// centered over the anchor point on any axis that had no gravity
// specified.
//
// If two parallel gravities are specified (e.g. 'left' and 'right'), the
// invalid_input error is raised.
//
//  gravity: bit mask of gravity directions
func (i *Positioner) SetGravity(gravity uint32) error {
	const opcode = 4
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(gravity))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetConstraintAdjustment : set the adjustment to be done when constrained
//
// Specify how the window should be positioned if the originally intended
// position caused the surface to be constrained, meaning at least
// partially outside positioning boundaries set by the compositor. The
// adjustment is set by constructing a bitmask describing the adjustment to
// be made when the surface is constrained on that axis.
//
// If no bit for one axis is set, the compositor will assume that the child
// surface should not change its position on that axis when constrained.
//
// If more than one bit for one axis is set, the order of how adjustments
// are applied is specified in the corresponding adjustment descriptions.
//
// The default adjustment is none.
//
//  constraintAdjustment: bit mask of constraint adjustments
func (i *Positioner) SetConstraintAdjustment(constraintAdjustment uint32) error {
	const opcode = 5
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(constraintAdjustment))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetOffset : set surface position offset
//
// Specify the surface position offset relative to the position of the
// anchor on the anchor rectangle and the anchor on the surface. For
// example if the anchor of the anchor rectangle is at (x, y), the surface
// has the gravity bottom|right, and the offset is (ox, oy), the calculated
// surface position will be (x + ox, y + oy). The offset position of the
// surface is the one used for constraint testing. See
// set_constraint_adjustment.
//
// An example use case is placing a popup menu on top of a user interface
// element, while aligning the user interface element of the parent surface
// with some user interface element placed somewhere in the popup surface.
//
//  x: surface position x offset
//  y: surface position y offset
func (i *Positioner) SetOffset(x, y int32) error {
	const opcode = 6
	const rLen = 8 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(x))
	l += 4
	client.PutUint32(r[l:l+4], uint32(y))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

type PositionerError uint32

// PositionerError :
const (
	// PositionerErrorInvalidInput : invalid input provided
	PositionerErrorInvalidInput PositionerError = 0
)

func (e PositionerError) Name() string {
	switch e {
	case PositionerErrorInvalidInput:
		return "invalid_input"
	default:
		return ""
	}
}

func (e PositionerError) Value() string {
	switch e {
	case PositionerErrorInvalidInput:
		return "0"
	default:
		return ""
	}
}

func (e PositionerError) String() string {
	return e.Name() + "=" + e.Value()
}

type PositionerAnchor uint32

// PositionerAnchor :
const (
	// PositionerAnchorNone : the center of the anchor rectangle
	PositionerAnchorNone PositionerAnchor = 0
	// PositionerAnchorTop : the top edge of the anchor rectangle
	PositionerAnchorTop PositionerAnchor = 1
	// PositionerAnchorBottom : the bottom edge of the anchor rectangle
	PositionerAnchorBottom PositionerAnchor = 2
	// PositionerAnchorLeft : the left edge of the anchor rectangle
	PositionerAnchorLeft PositionerAnchor = 4
	// PositionerAnchorRight : the right edge of the anchor rectangle
	PositionerAnchorRight PositionerAnchor = 8
)

func (e PositionerAnchor) Name() string {
	switch e {
	case PositionerAnchorNone:
		return "none"
	case PositionerAnchorTop:
		return "top"
	case PositionerAnchorBottom:
		return "bottom"
	case PositionerAnchorLeft:
		return "left"
	case PositionerAnchorRight:
		return "right"
	default:
		return ""
	}
}

func (e PositionerAnchor) Value() string {
	switch e {
	case PositionerAnchorNone:
		return "0"
	case PositionerAnchorTop:
		return "1"
	case PositionerAnchorBottom:
		return "2"
	case PositionerAnchorLeft:
		return "4"
	case PositionerAnchorRight:
		return "8"
	default:
		return ""
	}
}

func (e PositionerAnchor) String() string {
	return e.Name() + "=" + e.Value()
}

type PositionerGravity uint32

// PositionerGravity :
const (
	// PositionerGravityNone : center over the anchor edge
	PositionerGravityNone PositionerGravity = 0
	// PositionerGravityTop : position above the anchor edge
	PositionerGravityTop PositionerGravity = 1
	// PositionerGravityBottom : position below the anchor edge
	PositionerGravityBottom PositionerGravity = 2
	// PositionerGravityLeft : position to the left of the anchor edge
	PositionerGravityLeft PositionerGravity = 4
	// PositionerGravityRight : position to the right of the anchor edge
	PositionerGravityRight PositionerGravity = 8
)

func (e PositionerGravity) Name() string {
	switch e {
	case PositionerGravityNone:
		return "none"
	case PositionerGravityTop:
		return "top"
	case PositionerGravityBottom:
		return "bottom"
	case PositionerGravityLeft:
		return "left"
	case PositionerGravityRight:
		return "right"
	default:
		return ""
	}
}

func (e PositionerGravity) Value() string {
	switch e {
	case PositionerGravityNone:
		return "0"
	case PositionerGravityTop:
		return "1"
	case PositionerGravityBottom:
		return "2"
	case PositionerGravityLeft:
		return "4"
	case PositionerGravityRight:
		return "8"
	default:
		return ""
	}
}

func (e PositionerGravity) String() string {
	return e.Name() + "=" + e.Value()
}

type PositionerConstraintAdjustment uint32

// PositionerConstraintAdjustment : constraint adjustments
//
// The constraint adjustment value define ways the compositor will adjust
// the position of the surface, if the unadjusted position would result
// in the surface being partly constrained.
//
// Whether a surface is considered 'constrained' is left to the compositor
// to determine. For example, the surface may be partly outside the
// compositor's defined 'work area', thus necessitating the child surface's
// position be adjusted until it is entirely inside the work area.
//
// The adjustments can be combined, according to a defined precedence: 1)
// Flip, 2) Slide, 3) Resize.
const (
	PositionerConstraintAdjustmentNone    PositionerConstraintAdjustment = 0
	PositionerConstraintAdjustmentSlideX  PositionerConstraintAdjustment = 1
	PositionerConstraintAdjustmentSlideY  PositionerConstraintAdjustment = 2
	PositionerConstraintAdjustmentFlipX   PositionerConstraintAdjustment = 4
	PositionerConstraintAdjustmentFlipY   PositionerConstraintAdjustment = 8
	PositionerConstraintAdjustmentResizeX PositionerConstraintAdjustment = 16
	PositionerConstraintAdjustmentResizeY PositionerConstraintAdjustment = 32
)

func (e PositionerConstraintAdjustment) Name() string {
	switch e {
	case PositionerConstraintAdjustmentNone:
		return "none"
	case PositionerConstraintAdjustmentSlideX:
		return "slide_x"
	case PositionerConstraintAdjustmentSlideY:
		return "slide_y"
	case PositionerConstraintAdjustmentFlipX:
		return "flip_x"
	case PositionerConstraintAdjustmentFlipY:
		return "flip_y"
	case PositionerConstraintAdjustmentResizeX:
		return "resize_x"
	case PositionerConstraintAdjustmentResizeY:
		return "resize_y"
	default:
		return ""
	}
}

func (e PositionerConstraintAdjustment) Value() string {
	switch e {
	case PositionerConstraintAdjustmentNone:
		return "0"
	case PositionerConstraintAdjustmentSlideX:
		return "1"
	case PositionerConstraintAdjustmentSlideY:
		return "2"
	case PositionerConstraintAdjustmentFlipX:
		return "4"
	case PositionerConstraintAdjustmentFlipY:
		return "8"
	case PositionerConstraintAdjustmentResizeX:
		return "16"
	case PositionerConstraintAdjustmentResizeY:
		return "32"
	default:
		return ""
	}
}

func (e PositionerConstraintAdjustment) String() string {
	return e.Name() + "=" + e.Value()
}

// Surface : desktop user interface surface base interface
//
// An interface that may be implemented by a wl_surface, for
// implementations that provide a desktop-style user interface.
//
// It provides a base set of functionality required to construct user
// interface elements requiring management by the compositor, such as
// toplevel windows, menus, etc. The types of functionality are split into
// xdg_surface roles.
//
// Creating an xdg_surface does not set the role for a wl_surface. In order
// to map an xdg_surface, the client must create a role-specific object
// using, e.g., get_toplevel, get_popup. The wl_surface for any given
// xdg_surface can have at most one role, and may not be assigned any role
// not based on xdg_surface.
//
// A role must be assigned before any other requests are made to the
// xdg_surface object.
//
// The client must call wl_surface.commit on the corresponding wl_surface
// for the xdg_surface state to take effect.
//
// Creating an xdg_surface from a wl_surface which has a buffer attached or
// committed is a client error, and any attempts by a client to attach or
// manipulate a buffer prior to the first xdg_surface.configure call must
// also be treated as errors.
//
// For a surface to be mapped by the compositor, the following conditions
// must be met: (1) the client has assigned an xdg_surface based role to the
// surface, (2) the client has set and committed the xdg_surface state and
// the role dependent state to the surface and (3) the client has committed a
// buffer to the surface.
type Surface struct {
	client.BaseProxy
	configureHandlers []SurfaceConfigureHandlerFunc
}

// NewSurface : desktop user interface surface base interface
//
// An interface that may be implemented by a wl_surface, for
// implementations that provide a desktop-style user interface.
//
// It provides a base set of functionality required to construct user
// interface elements requiring management by the compositor, such as
// toplevel windows, menus, etc. The types of functionality are split into
// xdg_surface roles.
//
// Creating an xdg_surface does not set the role for a wl_surface. In order
// to map an xdg_surface, the client must create a role-specific object
// using, e.g., get_toplevel, get_popup. The wl_surface for any given
// xdg_surface can have at most one role, and may not be assigned any role
// not based on xdg_surface.
//
// A role must be assigned before any other requests are made to the
// xdg_surface object.
//
// The client must call wl_surface.commit on the corresponding wl_surface
// for the xdg_surface state to take effect.
//
// Creating an xdg_surface from a wl_surface which has a buffer attached or
// committed is a client error, and any attempts by a client to attach or
// manipulate a buffer prior to the first xdg_surface.configure call must
// also be treated as errors.
//
// For a surface to be mapped by the compositor, the following conditions
// must be met: (1) the client has assigned an xdg_surface based role to the
// surface, (2) the client has set and committed the xdg_surface state and
// the role dependent state to the surface and (3) the client has committed a
// buffer to the surface.
func NewSurface(ctx *client.Context) *Surface {
	zxdgSurfaceV6 := &Surface{}
	ctx.Register(zxdgSurfaceV6)
	return zxdgSurfaceV6
}

// Destroy : destroy the xdg_surface
//
// Destroy the xdg_surface object. An xdg_surface must only be destroyed
// after its role object has been destroyed.
//
func (i *Surface) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 0
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// GetToplevel : assign the xdg_toplevel surface role
//
// This creates an xdg_toplevel object for the given xdg_surface and gives
// the associated wl_surface the xdg_toplevel role.
//
// See the documentation of xdg_toplevel for more details about what an
// xdg_toplevel is and how it is used.
//
func (i *Surface) GetToplevel() (*Toplevel, error) {
	id := NewToplevel(i.Context())
	const opcode = 1
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], id.ID())
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return id, err
}

// GetPopup : assign the xdg_popup surface role
//
// This creates an xdg_popup object for the given xdg_surface and gives the
// associated wl_surface the xdg_popup role.
//
// See the documentation of xdg_popup for more details about what an
// xdg_popup is and how it is used.
//
func (i *Surface) GetPopup(parent *Surface, positioner *Positioner) (*Popup, error) {
	id := NewPopup(i.Context())
	const opcode = 2
	const rLen = 8 + 4 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], id.ID())
	l += 4
	client.PutUint32(r[l:l+4], parent.ID())
	l += 4
	client.PutUint32(r[l:l+4], positioner.ID())
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return id, err
}

// SetWindowGeometry : set the new window geometry
//
// The window geometry of a surface is its "visible bounds" from the
// user's perspective. Client-side decorations often have invisible
// portions like drop-shadows which should be ignored for the
// purposes of aligning, placing and constraining windows.
//
// The window geometry is double buffered, and will be applied at the
// time wl_surface.commit of the corresponding wl_surface is called.
//
// Once the window geometry of the surface is set, it is not possible to
// unset it, and it will remain the same until set_window_geometry is
// called again, even if a new subsurface or buffer is attached.
//
// If never set, the value is the full bounds of the surface,
// including any subsurfaces. This updates dynamically on every
// commit. This unset is meant for extremely simple clients.
//
// The arguments are given in the surface-local coordinate space of
// the wl_surface associated with this xdg_surface.
//
// The width and height must be greater than zero. Setting an invalid size
// will raise an error. When applied, the effective window geometry will be
// the set window geometry clamped to the bounding rectangle of the
// combined geometry of the surface of the xdg_surface and the associated
// subsurfaces.
//
func (i *Surface) SetWindowGeometry(x, y, width, height int32) error {
	const opcode = 3
	const rLen = 8 + 4 + 4 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(x))
	l += 4
	client.PutUint32(r[l:l+4], uint32(y))
	l += 4
	client.PutUint32(r[l:l+4], uint32(width))
	l += 4
	client.PutUint32(r[l:l+4], uint32(height))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// AckConfigure : ack a configure event
//
// When a configure event is received, if a client commits the
// surface in response to the configure event, then the client
// must make an ack_configure request sometime before the commit
// request, passing along the serial of the configure event.
//
// For instance, for toplevel surfaces the compositor might use this
// information to move a surface to the top left only when the client has
// drawn itself for the maximized or fullscreen state.
//
// If the client receives multiple configure events before it
// can respond to one, it only has to ack the last configure event.
//
// A client is not required to commit immediately after sending
// an ack_configure request - it may even ack_configure several times
// before its next surface commit.
//
// A client may send multiple ack_configure requests before committing, but
// only the last request sent before a commit indicates which configure
// event the client really is responding to.
//
//  serial: the serial from the configure event
func (i *Surface) AckConfigure(serial uint32) error {
	const opcode = 4
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(serial))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

type SurfaceError uint32

// SurfaceError :
const (
	SurfaceErrorNotConstructed     SurfaceError = 1
	SurfaceErrorAlreadyConstructed SurfaceError = 2
	SurfaceErrorUnconfiguredBuffer SurfaceError = 3
)

func (e SurfaceError) Name() string {
	switch e {
	case SurfaceErrorNotConstructed:
		return "not_constructed"
	case SurfaceErrorAlreadyConstructed:
		return "already_constructed"
	case SurfaceErrorUnconfiguredBuffer:
		return "unconfigured_buffer"
	default:
		return ""
	}
}

func (e SurfaceError) Value() string {
	switch e {
	case SurfaceErrorNotConstructed:
		return "1"
	case SurfaceErrorAlreadyConstructed:
		return "2"
	case SurfaceErrorUnconfiguredBuffer:
		return "3"
	default:
		return ""
	}
}

func (e SurfaceError) String() string {
	return e.Name() + "=" + e.Value()
}

// SurfaceConfigureEvent : suggest a surface change
//
// The configure event marks the end of a configure sequence. A configure
// sequence is a set of one or more events configuring the state of the
// xdg_surface, including the final xdg_surface.configure event.
//
// Where applicable, xdg_surface surface roles will during a configure
// sequence extend this event as a latched state sent as events before the
// xdg_surface.configure event. Such events should be considered to make up
// a set of atomically applied configuration states, where the
// xdg_surface.configure commits the accumulated state.
//
// Clients should arrange their surface for the new states, and then send
// an ack_configure request with the serial sent in this configure event at
// some point before committing the new surface.
//
// If the client receives multiple configure events before it can respond
// to one, it is free to discard all but the last event it received.
type SurfaceConfigureEvent struct {
	Serial uint32
}
type SurfaceConfigureHandlerFunc func(SurfaceConfigureEvent)

// AddConfigureHandler : adds handler for SurfaceConfigureEvent
func (i *Surface) AddConfigureHandler(f SurfaceConfigureHandlerFunc) {
	if f == nil {
		return
	}

	i.configureHandlers = append(i.configureHandlers, f)
}

func (i *Surface) Dispatch(opcode uint16, fd uintptr, data []byte) {
	switch opcode {
	case 0:
		if len(i.configureHandlers) == 0 {
			return
		}
		var e SurfaceConfigureEvent
		l := 0
		e.Serial = client.Uint32(data[l : l+4])
		l += 4
		for _, f := range i.configureHandlers {
			f(e)
		}
	}
}

// Toplevel : toplevel surface
//
// This interface defines an xdg_surface role which allows a surface to,
// among other things, set window-like properties such as maximize,
// fullscreen, and minimize, set application-specific metadata like title and
// id, and well as trigger user interactive operations such as interactive
// resize and move.
type Toplevel struct {
	client.BaseProxy
	configureHandlers []ToplevelConfigureHandlerFunc
	closeHandlers     []ToplevelCloseHandlerFunc
}

// NewToplevel : toplevel surface
//
// This interface defines an xdg_surface role which allows a surface to,
// among other things, set window-like properties such as maximize,
// fullscreen, and minimize, set application-specific metadata like title and
// id, and well as trigger user interactive operations such as interactive
// resize and move.
func NewToplevel(ctx *client.Context) *Toplevel {
	zxdgToplevelV6 := &Toplevel{}
	ctx.Register(zxdgToplevelV6)
	return zxdgToplevelV6
}

// Destroy : destroy the xdg_toplevel
//
// Unmap and destroy the window. The window will be effectively
// hidden from the user's point of view, and all state like
// maximization, fullscreen, and so on, will be lost.
//
func (i *Toplevel) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 0
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetParent : set the parent of this surface
//
// Set the "parent" of this surface. This window should be stacked
// above a parent. The parent surface must be mapped as long as this
// surface is mapped.
//
// Parent windows should be set on dialogs, toolboxes, or other
// "auxiliary" surfaces, so that the parent is raised when the dialog
// is raised.
//
func (i *Toplevel) SetParent(parent *Toplevel) error {
	const opcode = 1
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	if parent == nil {
		client.PutUint32(r[l:l+4], 0)
		l += 4
	} else {
		client.PutUint32(r[l:l+4], parent.ID())
		l += 4
	}
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetTitle : set surface title
//
// Set a short title for the surface.
//
// This string may be used to identify the surface in a task bar,
// window list, or other user interface elements provided by the
// compositor.
//
// The string must be encoded in UTF-8.
//
func (i *Toplevel) SetTitle(title string) error {
	const opcode = 2
	titleLen := client.PaddedLen(len(title) + 1)
	rLen := 8 + (4 + titleLen)
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutString(r[l:l+(4+titleLen)], title, titleLen)
	l += (4 + titleLen)
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetAppId : set application ID
//
// Set an application identifier for the surface.
//
// The app ID identifies the general class of applications to which
// the surface belongs. The compositor can use this to group multiple
// surfaces together, or to determine how to launch a new application.
//
// For D-Bus activatable applications, the app ID is used as the D-Bus
// service name.
//
// The compositor shell will try to group application surfaces together
// by their app ID. As a best practice, it is suggested to select app
// ID's that match the basename of the application's .desktop file.
// For example, "org.freedesktop.FooViewer" where the .desktop file is
// "org.freedesktop.FooViewer.desktop".
//
// See the desktop-entry specification [0] for more details on
// application identifiers and how they relate to well-known D-Bus
// names and .desktop files.
//
// [0] http://standards.freedesktop.org/desktop-entry-spec/
//
func (i *Toplevel) SetAppId(appId string) error {
	const opcode = 3
	appIdLen := client.PaddedLen(len(appId) + 1)
	rLen := 8 + (4 + appIdLen)
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutString(r[l:l+(4+appIdLen)], appId, appIdLen)
	l += (4 + appIdLen)
	err := i.Context().WriteMsg(r, nil)
	return err
}

// ShowWindowMenu : show the window menu
//
// Clients implementing client-side decorations might want to show
// a context menu when right-clicking on the decorations, giving the
// user a menu that they can use to maximize or minimize the window.
//
// This request asks the compositor to pop up such a window menu at
// the given position, relative to the local surface coordinates of
// the parent surface. There are no guarantees as to what menu items
// the window menu contains.
//
// This request must be used in response to some sort of user action
// like a button press, key press, or touch down event.
//
//  seat: the wl_seat of the user event
//  serial: the serial of the user event
//  x: the x position to pop up the window menu at
//  y: the y position to pop up the window menu at
func (i *Toplevel) ShowWindowMenu(seat *client.Seat, serial uint32, x, y int32) error {
	const opcode = 4
	const rLen = 8 + 4 + 4 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], seat.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(serial))
	l += 4
	client.PutUint32(r[l:l+4], uint32(x))
	l += 4
	client.PutUint32(r[l:l+4], uint32(y))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// Move : start an interactive move
//
// Start an interactive, user-driven move of the surface.
//
// This request must be used in response to some sort of user action
// like a button press, key press, or touch down event. The passed
// serial is used to determine the type of interactive move (touch,
// pointer, etc).
//
// The server may ignore move requests depending on the state of
// the surface (e.g. fullscreen or maximized), or if the passed serial
// is no longer valid.
//
// If triggered, the surface will lose the focus of the device
// (wl_pointer, wl_touch, etc) used for the move. It is up to the
// compositor to visually indicate that the move is taking place, such as
// updating a pointer cursor, during the move. There is no guarantee
// that the device focus will return when the move is completed.
//
//  seat: the wl_seat of the user event
//  serial: the serial of the user event
func (i *Toplevel) Move(seat *client.Seat, serial uint32) error {
	const opcode = 5
	const rLen = 8 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], seat.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(serial))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// Resize : start an interactive resize
//
// Start a user-driven, interactive resize of the surface.
//
// This request must be used in response to some sort of user action
// like a button press, key press, or touch down event. The passed
// serial is used to determine the type of interactive resize (touch,
// pointer, etc).
//
// The server may ignore resize requests depending on the state of
// the surface (e.g. fullscreen or maximized).
//
// If triggered, the client will receive configure events with the
// "resize" state enum value and the expected sizes. See the "resize"
// enum value for more details about what is required. The client
// must also acknowledge configure events using "ack_configure". After
// the resize is completed, the client will receive another "configure"
// event without the resize state.
//
// If triggered, the surface also will lose the focus of the device
// (wl_pointer, wl_touch, etc) used for the resize. It is up to the
// compositor to visually indicate that the resize is taking place,
// such as updating a pointer cursor, during the resize. There is no
// guarantee that the device focus will return when the resize is
// completed.
//
// The edges parameter specifies how the surface should be resized,
// and is one of the values of the resize_edge enum. The compositor
// may use this information to update the surface position for
// example when dragging the top left corner. The compositor may also
// use this information to adapt its behavior, e.g. choose an
// appropriate cursor image.
//
//  seat: the wl_seat of the user event
//  serial: the serial of the user event
//  edges: which edge or corner is being dragged
func (i *Toplevel) Resize(seat *client.Seat, serial, edges uint32) error {
	const opcode = 6
	const rLen = 8 + 4 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], seat.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(serial))
	l += 4
	client.PutUint32(r[l:l+4], uint32(edges))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetMaxSize : set the maximum size
//
// Set a maximum size for the window.
//
// The client can specify a maximum size so that the compositor does
// not try to configure the window beyond this size.
//
// The width and height arguments are in window geometry coordinates.
// See xdg_surface.set_window_geometry.
//
// Values set in this way are double-buffered. They will get applied
// on the next commit.
//
// The compositor can use this information to allow or disallow
// different states like maximize or fullscreen and draw accurate
// animations.
//
// Similarly, a tiling window manager may use this information to
// place and resize client windows in a more effective way.
//
// The client should not rely on the compositor to obey the maximum
// size. The compositor may decide to ignore the values set by the
// client and request a larger size.
//
// If never set, or a value of zero in the request, means that the
// client has no expected maximum size in the given dimension.
// As a result, a client wishing to reset the maximum size
// to an unspecified state can use zero for width and height in the
// request.
//
// Requesting a maximum size to be smaller than the minimum size of
// a surface is illegal and will result in a protocol error.
//
// The width and height must be greater than or equal to zero. Using
// strictly negative values for width and height will result in a
// protocol error.
//
func (i *Toplevel) SetMaxSize(width, height int32) error {
	const opcode = 7
	const rLen = 8 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(width))
	l += 4
	client.PutUint32(r[l:l+4], uint32(height))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetMinSize : set the minimum size
//
// Set a minimum size for the window.
//
// The client can specify a minimum size so that the compositor does
// not try to configure the window below this size.
//
// The width and height arguments are in window geometry coordinates.
// See xdg_surface.set_window_geometry.
//
// Values set in this way are double-buffered. They will get applied
// on the next commit.
//
// The compositor can use this information to allow or disallow
// different states like maximize or fullscreen and draw accurate
// animations.
//
// Similarly, a tiling window manager may use this information to
// place and resize client windows in a more effective way.
//
// The client should not rely on the compositor to obey the minimum
// size. The compositor may decide to ignore the values set by the
// client and request a smaller size.
//
// If never set, or a value of zero in the request, means that the
// client has no expected minimum size in the given dimension.
// As a result, a client wishing to reset the minimum size
// to an unspecified state can use zero for width and height in the
// request.
//
// Requesting a minimum size to be larger than the maximum size of
// a surface is illegal and will result in a protocol error.
//
// The width and height must be greater than or equal to zero. Using
// strictly negative values for width and height will result in a
// protocol error.
//
func (i *Toplevel) SetMinSize(width, height int32) error {
	const opcode = 8
	const rLen = 8 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], uint32(width))
	l += 4
	client.PutUint32(r[l:l+4], uint32(height))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetMaximized : maximize the window
//
// Maximize the surface.
//
// After requesting that the surface should be maximized, the compositor
// will respond by emitting a configure event with the "maximized" state
// and the required window geometry. The client should then update its
// content, drawing it in a maximized state, i.e. without shadow or other
// decoration outside of the window geometry. The client must also
// acknowledge the configure when committing the new content (see
// ack_configure).
//
// It is up to the compositor to decide how and where to maximize the
// surface, for example which output and what region of the screen should
// be used.
//
// If the surface was already maximized, the compositor will still emit
// a configure event with the "maximized" state.
//
func (i *Toplevel) SetMaximized() error {
	const opcode = 9
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// UnsetMaximized : unmaximize the window
//
// Unmaximize the surface.
//
// After requesting that the surface should be unmaximized, the compositor
// will respond by emitting a configure event without the "maximized"
// state. If available, the compositor will include the window geometry
// dimensions the window had prior to being maximized in the configure
// request. The client must then update its content, drawing it in a
// regular state, i.e. potentially with shadow, etc. The client must also
// acknowledge the configure when committing the new content (see
// ack_configure).
//
// It is up to the compositor to position the surface after it was
// unmaximized; usually the position the surface had before maximizing, if
// applicable.
//
// If the surface was already not maximized, the compositor will still
// emit a configure event without the "maximized" state.
//
func (i *Toplevel) UnsetMaximized() error {
	const opcode = 10
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetFullscreen : set the window as fullscreen on a monitor
//
// Make the surface fullscreen.
//
// You can specify an output that you would prefer to be fullscreen.
// If this value is NULL, it's up to the compositor to choose which
// display will be used to map this surface.
//
// If the surface doesn't cover the whole output, the compositor will
// position the surface in the center of the output and compensate with
// black borders filling the rest of the output.
//
func (i *Toplevel) SetFullscreen(output *client.Output) error {
	const opcode = 11
	const rLen = 8 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	if output == nil {
		client.PutUint32(r[l:l+4], 0)
		l += 4
	} else {
		client.PutUint32(r[l:l+4], output.ID())
		l += 4
	}
	err := i.Context().WriteMsg(r, nil)
	return err
}

// UnsetFullscreen :
//
func (i *Toplevel) UnsetFullscreen() error {
	const opcode = 12
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// SetMinimized : set the window as minimized
//
// Request that the compositor minimize your surface. There is no
// way to know if the surface is currently minimized, nor is there
// any way to unset minimization on this surface.
//
// If you are looking to throttle redrawing when minimized, please
// instead use the wl_surface.frame event for this, as this will
// also work with live previews on windows in Alt-Tab, Expose or
// similar compositor features.
//
func (i *Toplevel) SetMinimized() error {
	const opcode = 13
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

type ToplevelResizeEdge uint32

// ToplevelResizeEdge : edge values for resizing
//
// These values are used to indicate which edge of a surface
// is being dragged in a resize operation.
const (
	ToplevelResizeEdgeNone        ToplevelResizeEdge = 0
	ToplevelResizeEdgeTop         ToplevelResizeEdge = 1
	ToplevelResizeEdgeBottom      ToplevelResizeEdge = 2
	ToplevelResizeEdgeLeft        ToplevelResizeEdge = 4
	ToplevelResizeEdgeTopLeft     ToplevelResizeEdge = 5
	ToplevelResizeEdgeBottomLeft  ToplevelResizeEdge = 6
	ToplevelResizeEdgeRight       ToplevelResizeEdge = 8
	ToplevelResizeEdgeTopRight    ToplevelResizeEdge = 9
	ToplevelResizeEdgeBottomRight ToplevelResizeEdge = 10
)

func (e ToplevelResizeEdge) Name() string {
	switch e {
	case ToplevelResizeEdgeNone:
		return "none"
	case ToplevelResizeEdgeTop:
		return "top"
	case ToplevelResizeEdgeBottom:
		return "bottom"
	case ToplevelResizeEdgeLeft:
		return "left"
	case ToplevelResizeEdgeTopLeft:
		return "top_left"
	case ToplevelResizeEdgeBottomLeft:
		return "bottom_left"
	case ToplevelResizeEdgeRight:
		return "right"
	case ToplevelResizeEdgeTopRight:
		return "top_right"
	case ToplevelResizeEdgeBottomRight:
		return "bottom_right"
	default:
		return ""
	}
}

func (e ToplevelResizeEdge) Value() string {
	switch e {
	case ToplevelResizeEdgeNone:
		return "0"
	case ToplevelResizeEdgeTop:
		return "1"
	case ToplevelResizeEdgeBottom:
		return "2"
	case ToplevelResizeEdgeLeft:
		return "4"
	case ToplevelResizeEdgeTopLeft:
		return "5"
	case ToplevelResizeEdgeBottomLeft:
		return "6"
	case ToplevelResizeEdgeRight:
		return "8"
	case ToplevelResizeEdgeTopRight:
		return "9"
	case ToplevelResizeEdgeBottomRight:
		return "10"
	default:
		return ""
	}
}

func (e ToplevelResizeEdge) String() string {
	return e.Name() + "=" + e.Value()
}

type ToplevelState uint32

// ToplevelState : types of state on the surface
//
// The different state values used on the surface. This is designed for
// state values like maximized, fullscreen. It is paired with the
// configure event to ensure that both the client and the compositor
// setting the state can be synchronized.
//
// States set in this way are double-buffered. They will get applied on
// the next commit.
const (
	// ToplevelStateMaximized : the surface is maximized
	ToplevelStateMaximized ToplevelState = 1
	// ToplevelStateFullscreen : the surface is fullscreen
	ToplevelStateFullscreen ToplevelState = 2
	// ToplevelStateResizing : the surface is being resized
	ToplevelStateResizing ToplevelState = 3
	// ToplevelStateActivated : the surface is now activated
	ToplevelStateActivated ToplevelState = 4
)

func (e ToplevelState) Name() string {
	switch e {
	case ToplevelStateMaximized:
		return "maximized"
	case ToplevelStateFullscreen:
		return "fullscreen"
	case ToplevelStateResizing:
		return "resizing"
	case ToplevelStateActivated:
		return "activated"
	default:
		return ""
	}
}

func (e ToplevelState) Value() string {
	switch e {
	case ToplevelStateMaximized:
		return "1"
	case ToplevelStateFullscreen:
		return "2"
	case ToplevelStateResizing:
		return "3"
	case ToplevelStateActivated:
		return "4"
	default:
		return ""
	}
}

func (e ToplevelState) String() string {
	return e.Name() + "=" + e.Value()
}

// ToplevelConfigureEvent : suggest a surface change
//
// This configure event asks the client to resize its toplevel surface or
// to change its state. The configured state should not be applied
// immediately. See xdg_surface.configure for details.
//
// The width and height arguments specify a hint to the window
// about how its surface should be resized in window geometry
// coordinates. See set_window_geometry.
//
// If the width or height arguments are zero, it means the client
// should decide its own window dimension. This may happen when the
// compositor needs to configure the state of the surface but doesn't
// have any information about any previous or expected dimension.
//
// The states listed in the event specify how the width/height
// arguments should be interpreted, and possibly how it should be
// drawn.
//
// Clients must send an ack_configure in response to this event. See
// xdg_surface.configure and xdg_surface.ack_configure for details.
type ToplevelConfigureEvent struct {
	Width  int32
	Height int32
	States []byte
}
type ToplevelConfigureHandlerFunc func(ToplevelConfigureEvent)

// AddConfigureHandler : adds handler for ToplevelConfigureEvent
func (i *Toplevel) AddConfigureHandler(f ToplevelConfigureHandlerFunc) {
	if f == nil {
		return
	}

	i.configureHandlers = append(i.configureHandlers, f)
}

// ToplevelCloseEvent : surface wants to be closed
//
// The close event is sent by the compositor when the user
// wants the surface to be closed. This should be equivalent to
// the user clicking the close button in client-side decorations,
// if your application has any.
//
// This is only a request that the user intends to close the
// window. The client may choose to ignore this request, or show
// a dialog to ask the user to save their data, etc.
type ToplevelCloseEvent struct{}
type ToplevelCloseHandlerFunc func(ToplevelCloseEvent)

// AddCloseHandler : adds handler for ToplevelCloseEvent
func (i *Toplevel) AddCloseHandler(f ToplevelCloseHandlerFunc) {
	if f == nil {
		return
	}

	i.closeHandlers = append(i.closeHandlers, f)
}

func (i *Toplevel) Dispatch(opcode uint16, fd uintptr, data []byte) {
	switch opcode {
	case 0:
		if len(i.configureHandlers) == 0 {
			return
		}
		var e ToplevelConfigureEvent
		l := 0
		e.Width = int32(client.Uint32(data[l : l+4]))
		l += 4
		e.Height = int32(client.Uint32(data[l : l+4]))
		l += 4
		statesLen := int(client.Uint32(data[l : l+4]))
		l += 4
		e.States = make([]byte, statesLen)
		copy(e.States, data[l:l+statesLen])
		l += statesLen
		for _, f := range i.configureHandlers {
			f(e)
		}
	case 1:
		if len(i.closeHandlers) == 0 {
			return
		}
		var e ToplevelCloseEvent
		for _, f := range i.closeHandlers {
			f(e)
		}
	}
}

// Popup : short-lived, popup surfaces for menus
//
// A popup surface is a short-lived, temporary surface. It can be used to
// implement for example menus, popovers, tooltips and other similar user
// interface concepts.
//
// A popup can be made to take an explicit grab. See xdg_popup.grab for
// details.
//
// When the popup is dismissed, a popup_done event will be sent out, and at
// the same time the surface will be unmapped. See the xdg_popup.popup_done
// event for details.
//
// Explicitly destroying the xdg_popup object will also dismiss the popup and
// unmap the surface. Clients that want to dismiss the popup when another
// surface of their own is clicked should dismiss the popup using the destroy
// request.
//
// The parent surface must have either the xdg_toplevel or xdg_popup surface
// role.
//
// A newly created xdg_popup will be stacked on top of all previously created
// xdg_popup surfaces associated with the same xdg_toplevel.
//
// The parent of an xdg_popup must be mapped (see the xdg_surface
// description) before the xdg_popup itself.
//
// The x and y arguments passed when creating the popup object specify
// where the top left of the popup should be placed, relative to the
// local surface coordinates of the parent surface. See
// xdg_surface.get_popup. An xdg_popup must intersect with or be at least
// partially adjacent to its parent surface.
//
// The client must call wl_surface.commit on the corresponding wl_surface
// for the xdg_popup state to take effect.
type Popup struct {
	client.BaseProxy
	configureHandlers []PopupConfigureHandlerFunc
	popupDoneHandlers []PopupPopupDoneHandlerFunc
}

// NewPopup : short-lived, popup surfaces for menus
//
// A popup surface is a short-lived, temporary surface. It can be used to
// implement for example menus, popovers, tooltips and other similar user
// interface concepts.
//
// A popup can be made to take an explicit grab. See xdg_popup.grab for
// details.
//
// When the popup is dismissed, a popup_done event will be sent out, and at
// the same time the surface will be unmapped. See the xdg_popup.popup_done
// event for details.
//
// Explicitly destroying the xdg_popup object will also dismiss the popup and
// unmap the surface. Clients that want to dismiss the popup when another
// surface of their own is clicked should dismiss the popup using the destroy
// request.
//
// The parent surface must have either the xdg_toplevel or xdg_popup surface
// role.
//
// A newly created xdg_popup will be stacked on top of all previously created
// xdg_popup surfaces associated with the same xdg_toplevel.
//
// The parent of an xdg_popup must be mapped (see the xdg_surface
// description) before the xdg_popup itself.
//
// The x and y arguments passed when creating the popup object specify
// where the top left of the popup should be placed, relative to the
// local surface coordinates of the parent surface. See
// xdg_surface.get_popup. An xdg_popup must intersect with or be at least
// partially adjacent to its parent surface.
//
// The client must call wl_surface.commit on the corresponding wl_surface
// for the xdg_popup state to take effect.
func NewPopup(ctx *client.Context) *Popup {
	zxdgPopupV6 := &Popup{}
	ctx.Register(zxdgPopupV6)
	return zxdgPopupV6
}

// Destroy : remove xdg_popup interface
//
// This destroys the popup. Explicitly destroying the xdg_popup
// object will also dismiss the popup, and unmap the surface.
//
// If this xdg_popup is not the "topmost" popup, a protocol error
// will be sent.
//
func (i *Popup) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 0
	const rLen = 8
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

// Grab : make the popup take an explicit grab
//
// This request makes the created popup take an explicit grab. An explicit
// grab will be dismissed when the user dismisses the popup, or when the
// client destroys the xdg_popup. This can be done by the user clicking
// outside the surface, using the keyboard, or even locking the screen
// through closing the lid or a timeout.
//
// If the compositor denies the grab, the popup will be immediately
// dismissed.
//
// This request must be used in response to some sort of user action like a
// button press, key press, or touch down event. The serial number of the
// event should be passed as 'serial'.
//
// The parent of a grabbing popup must either be an xdg_toplevel surface or
// another xdg_popup with an explicit grab. If the parent is another
// xdg_popup it means that the popups are nested, with this popup now being
// the topmost popup.
//
// Nested popups must be destroyed in the reverse order they were created
// in, e.g. the only popup you are allowed to destroy at all times is the
// topmost one.
//
// When compositors choose to dismiss a popup, they may dismiss every
// nested grabbing popup as well. When a compositor dismisses popups, it
// will follow the same dismissing order as required from the client.
//
// The parent of a grabbing popup must either be another xdg_popup with an
// active explicit grab, or an xdg_popup or xdg_toplevel, if there are no
// explicit grabs already taken.
//
// If the topmost grabbing popup is destroyed, the grab will be returned to
// the parent of the popup, if that parent previously had an explicit grab.
//
// If the parent is a grabbing popup which has already been dismissed, this
// popup will be immediately dismissed. If the parent is a popup that did
// not take an explicit grab, an error will be raised.
//
// During a popup grab, the client owning the grab will receive pointer
// and touch events for all their surfaces as normal (similar to an
// "owner-events" grab in X11 parlance), while the top most grabbing popup
// will always have keyboard focus.
//
//  seat: the wl_seat of the user event
//  serial: the serial of the user event
func (i *Popup) Grab(seat *client.Seat, serial uint32) error {
	const opcode = 1
	const rLen = 8 + 4 + 4
	r := make([]byte, rLen)
	l := 0
	client.PutUint32(r[l:4], i.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(rLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(r[l:l+4], seat.ID())
	l += 4
	client.PutUint32(r[l:l+4], uint32(serial))
	l += 4
	err := i.Context().WriteMsg(r, nil)
	return err
}

type PopupError uint32

// PopupError :
const (
	// PopupErrorInvalidGrab : tried to grab after being mapped
	PopupErrorInvalidGrab PopupError = 0
)

func (e PopupError) Name() string {
	switch e {
	case PopupErrorInvalidGrab:
		return "invalid_grab"
	default:
		return ""
	}
}

func (e PopupError) Value() string {
	switch e {
	case PopupErrorInvalidGrab:
		return "0"
	default:
		return ""
	}
}

func (e PopupError) String() string {
	return e.Name() + "=" + e.Value()
}

// PopupConfigureEvent : configure the popup surface
//
// This event asks the popup surface to configure itself given the
// configuration. The configured state should not be applied immediately.
// See xdg_surface.configure for details.
//
// The x and y arguments represent the position the popup was placed at
// given the xdg_positioner rule, relative to the upper left corner of the
// window geometry of the parent surface.
type PopupConfigureEvent struct {
	X      int32
	Y      int32
	Width  int32
	Height int32
}
type PopupConfigureHandlerFunc func(PopupConfigureEvent)

// AddConfigureHandler : adds handler for PopupConfigureEvent
func (i *Popup) AddConfigureHandler(f PopupConfigureHandlerFunc) {
	if f == nil {
		return
	}

	i.configureHandlers = append(i.configureHandlers, f)
}

// PopupPopupDoneEvent : popup interaction is done
//
// The popup_done event is sent out when a popup is dismissed by the
// compositor. The client should destroy the xdg_popup object at this
// point.
type PopupPopupDoneEvent struct{}
type PopupPopupDoneHandlerFunc func(PopupPopupDoneEvent)

// AddPopupDoneHandler : adds handler for PopupPopupDoneEvent
func (i *Popup) AddPopupDoneHandler(f PopupPopupDoneHandlerFunc) {
	if f == nil {
		return
	}

	i.popupDoneHandlers = append(i.popupDoneHandlers, f)
}

func (i *Popup) Dispatch(opcode uint16, fd uintptr, data []byte) {
	switch opcode {
	case 0:
		if len(i.configureHandlers) == 0 {
			return
		}
		var e PopupConfigureEvent
		l := 0
		e.X = int32(client.Uint32(data[l : l+4]))
		l += 4
		e.Y = int32(client.Uint32(data[l : l+4]))
		l += 4
		e.Width = int32(client.Uint32(data[l : l+4]))
		l += 4
		e.Height = int32(client.Uint32(data[l : l+4]))
		l += 4
		for _, f := range i.configureHandlers {
			f(e)
		}
	case 1:
		if len(i.popupDoneHandlers) == 0 {
			return
		}
		var e PopupPopupDoneEvent
		for _, f := range i.popupDoneHandlers {
			f(e)
		}
	}
}
